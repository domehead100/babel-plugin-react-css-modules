{"version":3,"sources":["../src/createObjectExpression.js"],"names":["createObjectExpression","t","object","properties","name","Object","keys","value","newValue","isAnyTypeAnnotation","stringLiteral","booleanLiteral","Error","push","objectProperty","objectExpression"],"mappings":";;;;;;AAEA;;;;;;AAQA;;;AAGA,MAAMA,yBAAyB,CAACC,CAAD,EAAgBC,MAAhB,KAA8D;AAC3F,QAAMC,aAAa,EAAnB;;AAEA,OAAK,MAAMC,IAAX,IAAmBC,OAAOC,IAAP,CAAYJ,MAAZ,CAAnB,EAAwC;AACtC,UAAMK,QAAQL,OAAOE,IAAP,CAAd;;AAEA,QAAII,QAAJ;;AAEA;AACA,QAAIP,EAAEQ,mBAAF,CAAsBF,KAAtB,CAAJ,EAAkC,CAEjC,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,iBAAWP,EAAES,aAAF,CAAgBH,KAAhB,CAAX;AACD,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,iBAAWR,uBAAuBC,CAAvB,EAA0BM,KAA1B,CAAX;AACD,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACrCC,iBAAWP,EAAEU,cAAF,CAAiBJ,KAAjB,CAAX;AACD,KAFM,MAEA;AACL,YAAM,IAAIK,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAEDT,eAAWU,IAAX,CACEZ,EAAEa,cAAF,CACEb,EAAES,aAAF,CAAgBN,IAAhB,CADF,EAEEI,QAFF,CADF;AAMD;;AAED,SAAOP,EAAEc,gBAAF,CAAmBZ,UAAnB,CAAP;AACD,CA9BD;;kBAgCeH,sB","file":"createObjectExpression.js","sourcesContent":["// @flow\r\n\r\nimport BabelTypes, {\r\n  ObjectExpression\r\n} from 'babel-types';\r\n\r\ntype InputObjectType = {\r\n  [key: string]: *\r\n};\r\n\r\n/**\r\n * Creates an AST representation of an InputObjectType shape object.\r\n */\r\nconst createObjectExpression = (t: BabelTypes, object: InputObjectType): ObjectExpression => {\r\n  const properties = [];\r\n\r\n  for (const name of Object.keys(object)) {\r\n    const value = object[name];\r\n\r\n    let newValue;\r\n\r\n    // eslint-disable-next-line no-empty\r\n    if (t.isAnyTypeAnnotation(value)) {\r\n\r\n    } else if (typeof value === 'string') {\r\n      newValue = t.stringLiteral(value);\r\n    } else if (typeof value === 'object') {\r\n      newValue = createObjectExpression(t, value);\r\n    } else if (typeof value === 'boolean') {\r\n      newValue = t.booleanLiteral(value);\r\n    } else {\r\n      throw new Error('Unexpected type.');\r\n    }\r\n\r\n    properties.push(\r\n      t.objectProperty(\r\n        t.stringLiteral(name),\r\n        newValue\r\n      )\r\n    );\r\n  }\r\n\r\n  return t.objectExpression(properties);\r\n};\r\n\r\nexport default createObjectExpression;\r\n"]}