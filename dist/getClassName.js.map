{"version":3,"sources":["../src/getClassName.js"],"names":["DEFAULT_HANDLE_MISSING_STYLENAME_OPTION","isNamespacedStyleName","styleName","indexOf","getClassNameForNamespacedStyleName","styleModuleImportMap","handleMissingStyleNameOption","styleNameParts","split","importName","moduleName","handleMissingStyleName","Error","console","warn","styleNameValue","options","styleModuleImportMapKeys","Object","keys","filter","map","length","styleModuleMap","className","join"],"mappings":"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","file":"getClassName.js","sourcesContent":["// @flow\r\n\r\nimport type {\r\n  StyleModuleMapType,\r\n  StyleModuleImportMapType,\r\n  HandleMissingStyleNameOptionType\r\n} from './types';\r\n\r\nconst DEFAULT_HANDLE_MISSING_STYLENAME_OPTION = 'throw';\r\n\r\nconst isNamespacedStyleName = (styleName: string): boolean => {\r\n  return styleName.indexOf('.') !== -1;\r\n};\r\n\r\nconst getClassNameForNamespacedStyleName = (\r\n  styleName: string,\r\n  styleModuleImportMap: StyleModuleImportMapType,\r\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\r\n): ?string => {\r\n  // Note:\r\n  // Do not use the desctructing syntax with Babel.\r\n  // Desctructing adds _slicedToArray helper.\r\n  const styleNameParts = styleName.split('.');\r\n  const importName = styleNameParts[0];\r\n  const moduleName = styleNameParts[1];\r\n  const handleMissingStyleName = handleMissingStyleNameOption ||\r\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\r\n\r\n  if (!moduleName) {\r\n    if (handleMissingStyleName === 'throw') {\r\n      throw new Error('Invalid style name.');\r\n    } else if (handleMissingStyleName === 'warn') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('Invalid style name.');\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (!styleModuleImportMap[importName]) {\r\n    if (handleMissingStyleName === 'throw') {\r\n      throw new Error('CSS module import does not exist.');\r\n    } else if (handleMissingStyleName === 'warn') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('CSS module import does not exist.');\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (!styleModuleImportMap[importName][moduleName]) {\r\n    if (handleMissingStyleName === 'throw') {\r\n      throw new Error('CSS module does not exist.');\r\n    } else if (handleMissingStyleName === 'warn') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('CSS module does not exist.');\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return styleModuleImportMap[importName][moduleName];\r\n};\r\n\r\ntype OptionsType = {|\r\n  handleMissingStyleName: HandleMissingStyleNameOptionType\r\n|};\r\n\r\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: OptionsType): string => {\r\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\r\n\r\n  const handleMissingStyleName = options && options.handleMissingStyleName ||\r\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\r\n\r\n  return styleNameValue\r\n    .split(' ')\r\n    .filter((styleName) => {\r\n      return styleName;\r\n    })\r\n    .map((styleName) => {\r\n      if (isNamespacedStyleName(styleName)) {\r\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\r\n      }\r\n\r\n      if (styleModuleImportMapKeys.length === 0) {\r\n        throw new Error('Cannot use styleName attribute without importing at least one stylesheet.');\r\n      }\r\n\r\n      if (styleModuleImportMapKeys.length > 1) {\r\n        throw new Error('Cannot use anonymous style name with more than one stylesheet import.');\r\n      }\r\n\r\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\r\n\r\n      if (!styleModuleMap[styleName]) {\r\n        if (handleMissingStyleName === 'throw') {\r\n          throw new Error('Could not resolve the styleName \\'' + styleName + '\\'.');\r\n        }\r\n        if (handleMissingStyleName === 'warn') {\r\n          // eslint-disable-next-line no-console\r\n          console.warn('Could not resolve the styleName \\'' + styleName + '\\'.');\r\n        }\r\n      }\r\n\r\n      return styleModuleMap[styleName];\r\n    })\r\n    .filter((className) => {\r\n      // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\r\n      return className;\r\n    })\r\n    .join(' ');\r\n};\r\n"]}