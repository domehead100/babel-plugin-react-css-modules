{"version":3,"sources":["../../src/getClassName.js"],"names":[],"mappings":";;;;;;;AAQA,IAAM,0CAA0C,OAAhD;;AAEA,IAAM,wBAAwB,SAAxB,qBAAwB,CAAC,SAAD,EAAgC;AAC5D,SAAO,UAAU,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAAnC;AACD,CAFD;;AAIA,IAAM,qCAAqC,SAArC,kCAAqC,CACzC,SADyC,EAEzC,oBAFyC,EAGzC,4BAHyC,EAI7B;AACZ;AACA;AACA;AACA,MAAM,iBAAiB,UAAU,KAAV,CAAgB,GAAhB,CAAvB;AACA,MAAM,aAAa,eAAe,CAAf,CAAnB;AACA,MAAM,aAAa,eAAe,CAAf,CAAnB;AACA,MAAM,yBAAyB,gCAC7B,uCADF;;AAGA,MAAI,CAAC,UAAL,EAAiB;AACf,QAAI,2BAA2B,OAA/B,EAAwC;AACtC,YAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD,KAFD,MAEO,IAAI,2BAA2B,MAA/B,EAAuC;AAC5C;AACA,cAAQ,IAAR,CAAa,qBAAb;AACD,KAHM,MAGA;AACL,aAAO,IAAP;AACD;AACF;;AAED,MAAI,CAAC,qBAAqB,UAArB,CAAL,EAAuC;AACrC,QAAI,2BAA2B,OAA/B,EAAwC;AACtC,YAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD,KAFD,MAEO,IAAI,2BAA2B,MAA/B,EAAuC;AAC5C;AACA,cAAQ,IAAR,CAAa,mCAAb;AACD,KAHM,MAGA;AACL,aAAO,IAAP;AACD;AACF;;AAED,MAAI,CAAC,qBAAqB,UAArB,EAAiC,UAAjC,CAAL,EAAmD;AACjD,QAAI,2BAA2B,OAA/B,EAAwC;AACtC,YAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACD,KAFD,MAEO,IAAI,2BAA2B,MAA/B,EAAuC;AAC5C;AACA,cAAQ,IAAR,CAAa,4BAAb;AACD,KAHM,MAGA;AACL,aAAO,IAAP;AACD;AACF;;AAED,SAAO,qBAAqB,UAArB,EAAiC,UAAjC,CAAP;AACD,CAhDD;;kBAsDe,UAAC,cAAD,EAAyB,oBAAzB,EAAyE,OAAzE,EAA2G;AACxH,MAAM,2BAA2B,OAAO,IAAP,CAAY,oBAAZ,CAAjC;;AAEA,MAAM,yBAAyB,WAAW,QAAQ,sBAAnB,IAC7B,uCADF;;AAGA,SAAO,eACJ,KADI,CACE,GADF,EAEJ,MAFI,CAEG,UAAC,SAAD,EAAe;AACrB,WAAO,SAAP;AACD,GAJI,EAKJ,GALI,CAKA,UAAC,SAAD,EAAe;AAClB,QAAI,sBAAsB,SAAtB,CAAJ,EAAsC;AACpC,aAAO,mCAAmC,SAAnC,EAA8C,oBAA9C,EAAoE,sBAApE,CAAP;AACD;;AAED,QAAI,yBAAyB,MAAzB,KAAoC,CAAxC,EAA2C;AACzC,YAAM,IAAI,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,QAAI,yBAAyB,MAAzB,GAAkC,CAAtC,EAAyC;AACvC,YAAM,IAAI,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAED,QAAM,iBAAqC,qBAAqB,yBAAyB,CAAzB,CAArB,CAA3C;;AAEA,QAAI,CAAC,eAAe,SAAf,CAAL,EAAgC;AAC9B,UAAI,2BAA2B,OAA/B,EAAwC;AACtC,cAAM,IAAI,KAAJ,CAAU,uCAAuC,SAAvC,GAAmD,KAA7D,CAAN;AACD;AACD,UAAI,2BAA2B,MAA/B,EAAuC;AACrC;AACA,gBAAQ,IAAR,CAAa,uCAAuC,SAAvC,GAAmD,KAAhE;AACD;AACF;;AAED,WAAO,eAAe,SAAf,CAAP;AACD,GA/BI,EAgCJ,MAhCI,CAgCG,UAAC,SAAD,EAAe;AACrB;AACA,WAAO,SAAP;AACD,GAnCI,EAoCJ,IApCI,CAoCC,GApCD,CAAP;AAqCD,C","file":"getClassName.js","sourcesContent":["// @flow\r\n\r\nimport type {\r\n  StyleModuleMapType,\r\n  StyleModuleImportMapType,\r\n  HandleMissingStyleNameOptionType\r\n} from './types';\r\n\r\nconst DEFAULT_HANDLE_MISSING_STYLENAME_OPTION = 'throw';\r\n\r\nconst isNamespacedStyleName = (styleName: string): boolean => {\r\n  return styleName.indexOf('.') !== -1;\r\n};\r\n\r\nconst getClassNameForNamespacedStyleName = (\r\n  styleName: string,\r\n  styleModuleImportMap: StyleModuleImportMapType,\r\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\r\n): ?string => {\r\n  // Note:\r\n  // Do not use the desctructing syntax with Babel.\r\n  // Desctructing adds _slicedToArray helper.\r\n  const styleNameParts = styleName.split('.');\r\n  const importName = styleNameParts[0];\r\n  const moduleName = styleNameParts[1];\r\n  const handleMissingStyleName = handleMissingStyleNameOption ||\r\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\r\n\r\n  if (!moduleName) {\r\n    if (handleMissingStyleName === 'throw') {\r\n      throw new Error('Invalid style name.');\r\n    } else if (handleMissingStyleName === 'warn') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('Invalid style name.');\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (!styleModuleImportMap[importName]) {\r\n    if (handleMissingStyleName === 'throw') {\r\n      throw new Error('CSS module import does not exist.');\r\n    } else if (handleMissingStyleName === 'warn') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('CSS module import does not exist.');\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (!styleModuleImportMap[importName][moduleName]) {\r\n    if (handleMissingStyleName === 'throw') {\r\n      throw new Error('CSS module does not exist.');\r\n    } else if (handleMissingStyleName === 'warn') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('CSS module does not exist.');\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return styleModuleImportMap[importName][moduleName];\r\n};\r\n\r\ntype OptionsType = {|\r\n  handleMissingStyleName: HandleMissingStyleNameOptionType\r\n|};\r\n\r\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: OptionsType): string => {\r\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\r\n\r\n  const handleMissingStyleName = options && options.handleMissingStyleName ||\r\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\r\n\r\n  return styleNameValue\r\n    .split(' ')\r\n    .filter((styleName) => {\r\n      return styleName;\r\n    })\r\n    .map((styleName) => {\r\n      if (isNamespacedStyleName(styleName)) {\r\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\r\n      }\r\n\r\n      if (styleModuleImportMapKeys.length === 0) {\r\n        throw new Error('Cannot use styleName attribute without importing at least one stylesheet.');\r\n      }\r\n\r\n      if (styleModuleImportMapKeys.length > 1) {\r\n        throw new Error('Cannot use anonymous style name with more than one stylesheet import.');\r\n      }\r\n\r\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\r\n\r\n      if (!styleModuleMap[styleName]) {\r\n        if (handleMissingStyleName === 'throw') {\r\n          throw new Error('Could not resolve the styleName \\'' + styleName + '\\'.');\r\n        }\r\n        if (handleMissingStyleName === 'warn') {\r\n          // eslint-disable-next-line no-console\r\n          console.warn('Could not resolve the styleName \\'' + styleName + '\\'.');\r\n        }\r\n      }\r\n\r\n      return styleModuleMap[styleName];\r\n    })\r\n    .filter((className) => {\r\n      // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\r\n      return className;\r\n    })\r\n    .join(' ');\r\n};\r\n"]}